### 解题思路

1、一次遍历，统计字符出现次数。
2、做加减对冲统计，s1出现的字符计数+1，s2出现的字符计数-1。

### 执行结果

![捕获.PNG](https://pic.leetcode-cn.com/1664268086-VQDHJf-%E6%8D%95%E8%8E%B7.PNG)

### 代码

* java

```java
class Solution {
    public boolean CheckPermutation(String s1, String s2) {
        int len = s1.length();
        if (s2.length() != len) {
            // 长度不同
            return false;
        }

        HashMap<Character, Integer> charCntMap = new HashMap<>();
        // 一次遍历统计字符出现次数，s1的字符+1，s2的字符-1，对冲统计
        for (int i = 0; i < len; i++) {
            char c1 = s1.charAt(i);
            // +1
            charCntMap.put(c1, charCntMap.getOrDefault(c1, 0) + 1);
            char c2 = s2.charAt(i);
            // -1
            charCntMap.put(c2, charCntMap.getOrDefault(c2, 0) - 1);
        }

        // 遍历value，判断各字符是否对冲为0
        for (Integer cnt : charCntMap.values()) {
            if (cnt != 0) {
                return false;
            }
        }
        return true;
    }
}
```

