这个算法极其特殊，需要有信号处理的基础知识才能理解。

计算重叠面积按照定义，可以视为将两个矩阵平移对齐之后，对应位置相乘，再全部求和，这个操作在数字信号处理相关领域称为二维自相关（机器学习的时候通常称为二维卷积，但是这里卷积的定义和通常数字信号处理中定义略有区别），如果将第二个图像左右、上下翻转，则为标准的二维卷积。这个二维卷积运算得到的仍然是一个矩阵，每行每列代表如果采取相应的偏移之后按卷积规则计算得到的结果。

要计算这个二维矩阵，可以先选定行的偏移，然后计算至多(2N - 1)个一维卷积。而一维卷积可以通过快速傅里叶变换（FFT）转化为计算乘法，复杂度为O(nlogn)，因此也就变成了先选定行的偏移，再计算相应行FFT的乘积，IFFT之后再求和。而求和和IFFT的过程是可交换的，也就可以发现实际上相当于对于每行的FFT结果再次按列计算卷积，同样可以通过FFT加速，也就是先计算每一行的FFT，再将得到的FFT排列成矩阵，再次计算每一列的FFT，最后将得到的两个矩阵相乘，再做两次反变换就可以得到最终的二维卷积结果。分别按行、按列FFT在数字信号处理中称为二维FFT，也就是说二维卷积的结果等于两个矩阵各自二维FFT的结果相乘，再做二维IFFT即可，熟悉数字信号处理或是图像处理的应该会直接知道这个结果。

要注意的是FFT加速的卷积实际上是循环卷积，为了让循环卷积和普通卷积结果一致，需要将数据补上至少一倍的0，再考虑到FFT加速的条件，将长度补充到大于或等于2N的下一个2的幂次即可。如果喜欢使用base-4的FFT，也可以补充到4的幂次。

这里直接使用numpy的fft库计算fft，不手写蝶形算法了，耗时仅112ms，击败了100%的用户

* python3

```python
import numpy as np


class Solution:
    def largestOverlap(self, img1: List[List[int]], img2: List[List[int]]) -> int:
        N = len(img1)
        N2 = 1 << (N.bit_length() + 1)
        img1_fft = np.fft.fft2(np.array(img1), (N2, N2))
        img2_fft = np.fft.fft2(np.array(img2)[::-1, ::-1], (N2, N2))
        img1_fft *= img2_fft
        conv = np.fft.ifft2(img1_fft)
        return int(np.round(np.max(conv)))
```

