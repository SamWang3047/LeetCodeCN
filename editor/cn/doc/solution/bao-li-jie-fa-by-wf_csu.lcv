对于A中的每个1在B中也去找1，将偏移量相同的1的数目累加起来即可。
举例：下面两个矩阵A B，比如A中的(0,0)我们在B中也找1，比如找到B(1,1)，此时行偏移量是1-0=1列的偏移量是1-0=1(B的行减A的行，B的列减A的列)，故对应的偏移量为1，1的位置的1的个数加1,又比如A中的(1,1),我们找到了B中的(2,2),此时的偏移量为1，1(过程同上)，该偏移量的位置的1的个数加1...整个过程以此类推。应该注意到如果是A(2,1),在B中找1找到B(1,1)时偏移量为-1，0此时为负数相当于将A向上滑动，所以可以将行列的偏移量加上一个N使得偏移量都为非负数(或者使用hash表)。

时间复杂度：$O(n^4)$
空间复杂度：$O(n^2)$

* c++

```c++
A：    B:
1,1,0  0,0,0
0,1,0  0,1,1
0,1,0  0,0,1
```

* cpp

```cpp
class Solution {
public:
    int cnt[65][65];
    int largestOverlap(vector<vector<int>>& A, vector<vector<int>>& B) {
        int n = A.size(),res=0;
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                if (A[i][j]){
                    for (int i2 = 0; i2 < n; i2++){
                        for (int j2 = 0; j2 < n; j2++){
                            if (B[i2][j2]){
                                cnt[i2-i +N][j2-j +N]++;
                                res = max(res,cnt[i2-i+N][j2-j+N]);
                            }
                        }
                    }
                }
            }
        }
        return res;
    }
};
```

