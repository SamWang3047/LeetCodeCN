# 解题思路

这道题与《`21. 合并两个有序链表`》是蛮类似的，在合并有序列表中，我们操作的是链表中的节点，通过指定后续的next指针对链表进行拼装。那本题是要拼装字符串，我们可以遍历字符串的每个字符进行最终结果的拼装。

由于word1和word2的长度有可能是不同的，所以在遍历的判断上，我们采用 `i < w1 || i < w2` （其中： w1是word1的长度，w2是word2的长度）。而在拼装上，只有当 `i < w1`的时候才拼装word1的字符；只有当 `i < w2`的时候才拼装word2的字符; 具体操作细节，请参照如下图例所示：

![image.png](https://pic.leetcode.cn/1666487576-IdFpPG-image.png)

针对本题，时间复杂度 O(m + n)，其中 m 和 n 分别是两个字符串的长度。

# 代码实现

* java

```java
class Solution {
    public String mergeAlternately(String word1, String word2) {
        int w1 = word1.length(), w2 = word2.length(), index = 0;
        char[] result = new char[w1 + w2];
        for (int i = 0; i < w1 || i < w2; i++) {
            if (i < w1) result[index++] = word1.charAt(i);
            if (i < w2) result[index++] = word2.charAt(i);
        }
        return new String(result);
    }
}
```

![image.png](https://pic.leetcode.cn/1666487583-ESbVoQ-image.png)

今天的文章内容就这些了：

> 写作不易，笔者几个小时甚至数天完成的一篇文章，只愿换来您几秒钟的 **点赞** & **分享** 。

更多技术干货，欢迎大家关注公众号“**爪哇缪斯**” ~ \\(^o^)/ ~ 「干货分享，每天更新」
