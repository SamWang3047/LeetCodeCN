## 模拟

根据题意模拟即可：使用「双指针」统计空格数量和分割出所有单词。

代码：

* []

```Java
class Solution {
    public String reorderSpaces(String s) {
        int n = s.length(), cnt = 0;
        List<String> list = new ArrayList<>();
        for (int i = 0; i < n; ) {
            if (s.charAt(i) == ' ' && ++i >= 0 && ++cnt >= 0) continue;
            int j = i;
            while (j < n && s.charAt(j) != ' ') j++;
            list.add(s.substring(i, j));
            i = j;
        }
        StringBuilder sb = new StringBuilder();
        int m = list.size(), t = cnt / Math.max(m - 1, 1);
        String k = "";
        while (t-- > 0) k += " ";
        for (int i = 0; i < m; i++) {
            sb.append(list.get(i));
            if (i != m - 1) sb.append(k);
        }
        while (sb.length() != n) sb.append(" ");
        return sb.toString();
    }
}
```

* []

```TypeScript
function reorderSpaces(s: string): string {
    let n = s.length, cnt = 0
    const list = new Array<string>()
    for (let i = 0; i < n; ) {
        if (s[i] == ' ' && ++i >= 0 && ++cnt >= 0) continue
        let j = i + 1
        while (j < n && s[j] != ' ') j++
        list.push(s.substring(i, j))
        i = j
    }
    let ans = '', k = ''
    let m = list.length, t = Math.floor(cnt / Math.max(m - 1, 1))
    while (t-- > 0) k += ' '
    for (let i = 0; i < m; i++) {
        ans += list[i]
        if (i != m - 1) ans += k
    }
    while (ans.length != n) ans += ' '
    return ans
};
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
