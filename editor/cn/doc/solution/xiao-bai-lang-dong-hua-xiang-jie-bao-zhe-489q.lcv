### 题目分析

给定一个数组A，求该数组的所有连续子数组的最小值的总和。

举个例子：比如A=[3,1,2,4]，所有连续子数组分别为 [3]，[1]，[2]，[4]，[3,1]，[1,2]，[2,4]，[3,1,2]，[1,2,4]，[3,1,2,4]，对应子数组的最小值分别为3，1，2，4，1，1，2，1，1，1，总和为17。

### 解题思路1：暴力（动态规划）

这是最朴素也是最直观的解法，既然让我们要求每个子数组的最小值，那么直接枚举出所有子数组即可。两层循环，外层控制子数组的起始位置，内层控制子数组的结束位置。然后求出每个数组的最小值，求和即可。
请看下面的动画（每个括号就是子数组）：

<![leetcode-907-2.001.png](https://pic.leetcode-cn.com/1639818740-dBPrtl-leetcode-907-2.001.png),![leetcode-907-2.002.png](https://pic.leetcode-cn.com/1639818779-UXHyVL-leetcode-907-2.002.png),![leetcode-907-2.003.png](https://pic.leetcode-cn.com/1639818786-cQSQwP-leetcode-907-2.003.png),![leetcode-907-2.004.png](https://pic.leetcode-cn.com/1639818793-BgKxne-leetcode-907-2.004.png),![leetcode-907-2.005.png](https://pic.leetcode-cn.com/1639818801-DhVMPV-leetcode-907-2.005.png),![leetcode-907-2.006.png](https://pic.leetcode-cn.com/1639818806-gJQEHQ-leetcode-907-2.006.png),![leetcode-907-2.007.png](https://pic.leetcode-cn.com/1639818815-lBtpwK-leetcode-907-2.007.png),![leetcode-907-2.008.png](https://pic.leetcode-cn.com/1639818820-NsfEiQ-leetcode-907-2.008.png),![leetcode-907-2.009.png](https://pic.leetcode-cn.com/1639818828-xfidcu-leetcode-907-2.009.png),![leetcode-907-2.010.png](https://pic.leetcode-cn.com/1639818833-hxTkOk-leetcode-907-2.010.png),![leetcode-907-2.011.png](https://pic.leetcode-cn.com/1639818837-fkdASi-leetcode-907-2.011.png),![leetcode-907-2.012.png](https://pic.leetcode-cn.com/1639818840-KCIqHN-leetcode-907-2.012.png),![leetcode-907-2.013.png](https://pic.leetcode-cn.com/1639818845-DagCmW-leetcode-907-2.013.png),![leetcode-907-2.014.png](https://pic.leetcode-cn.com/1639818850-FWxdVJ-leetcode-907-2.014.png),![leetcode-907-2.015.png](https://pic.leetcode-cn.com/1639818854-cgbbyX-leetcode-907-2.015.png),![leetcode-907-2.016.png](https://pic.leetcode-cn.com/1639818857-NgTWBk-leetcode-907-2.016.png)>

* [java]

```java
class Solution {
    private static final int MOD = 1000000007;
    public int sumSubarrayMins(int[] arr) {
        if (arr == null || arr.length == 0) {
            return 0;
        }
        int n = arr.length;
        long ans = 0;
        // 起点
        for (int i = 0; i < n; i++) {
            int min = arr[i];
            // 终点
            for (int j = i; j < n; j++) {
                min = Math.min(min, arr[j]);
                ans = (ans + min) % MOD;
            }
        }
        return (int)ans;
    }
}
```

* [java]

```java
class Solution {
    private static final int MOD = 1000000007;
    public int sumSubarrayMins(int[] arr) {
        if (arr == null || arr.length == 0) {
            return 0;
        }
        int n = arr.length;
        long ans = 0;
        // 起点
        for (int i = 0; i < n; i++) {
            int min = arr[i];
            // 终点
            for (int j = i; j < n; j++) {
                min = Math.min(min, arr[j]);
                ans += min;
                // 将取余转换为减法
                if (ans >= MOD) {
                    ans -= MOD;
                }
            }
        }
        return (int)ans;
    }
}
```

> 上面给出了两种超时代码，只是为了测试mod操作的占用时间，第一种代码可以过78/87个测试用例，而第二种不用MOD运算的可以过83/87个测试用例，所以得到一个题外话：mod运算真的挺耗时间的。

![截屏2021-12-17 下午8.12.48.png](https://pic.leetcode-cn.com/1639743201-xNXVMU-%E6%88%AA%E5%B1%8F2021-12-17%20%E4%B8%8B%E5%8D%888.12.48.png)

时空复杂度：
时间复杂度：两层循环$O(n^2)$
空间复杂度：$O(1)$

为何超时？n题目中最大为$3*{10}^4$，$n^2$已接近${10}^9$且有MOD运算，因此必然会超时。

### 解题思路2：单调栈+贡献值

根据上面的$O(n^2)$暴力解法，我们需要优化时间复杂度。如何优化呢？下面考虑一个事实：
最小值是在一段连续数字中被筛选出来的，也就是说每个最小值都有一定的辐射范围。假设给定数组A=[3,1,2,4,1]，在一段连续数字3、1、2、4、1中，只要其中一段数字包含1，那么这段数字的最小值肯定为1，例如[3,1,2,4,1]、[3,1,2,4]、[3,1,2]、[1,2]等最小值都为1，我们把这叫做元素1的辐射范围。

请看下方动画：

<![leetcode-907-3.001.png](https://pic.leetcode-cn.com/1639819066-lKIUWV-leetcode-907-3.001.png),![leetcode-907-3.002.png](https://pic.leetcode-cn.com/1639819070-xIVlWo-leetcode-907-3.002.png),![leetcode-907-3.003.png](https://pic.leetcode-cn.com/1639819073-UhRCNc-leetcode-907-3.003.png),![leetcode-907-3.004.png](https://pic.leetcode-cn.com/1639819082-DqRGFr-leetcode-907-3.004.png),![leetcode-907-3.005.png](https://pic.leetcode-cn.com/1639819075-BkUHtR-leetcode-907-3.005.png),![leetcode-907-3.006.png](https://pic.leetcode-cn.com/1639819090-sVFbKW-leetcode-907-3.006.png)>

从动画中可以看到下标0的元素3辐射范围为[3]，下标1的元素1辐射范围为[3,1,2,4,1]，下标2的元素2辐射范围为[2,4]，下标3的元素4辐射范围为[4]，下标4的元素1辐射范围为[2,4,1]。

每个元素E=A[i]的辐射范围都是一个连续数组，这个辐射范围内产生的所有子数组最小值都为E，因此E在每个子数组中对答案的贡献值都为E。如果这个辐射范围内的子数组有n个，那么总贡献值为n*E。

那么这个辐射范围内能产生多少个子数组呢？我们枚举一下能产生多少个不同的左右边界对即可。假设辐射范围的左边界为left，右边界为right，元素E的下标为i，那么子数组的左边界应该在[left,i]中选取，子数组的右边界应该在[i,right]中选取。因此子数组个数为$(i - left + 1) * (right - i + 1)$，也就是说元素A[i]对答案的总贡献值为$A[i]*(i - left + 1) * (right - i + 1)$。

那么我们只要计算出每个元素的贡献值，然后求和就好了。从上面可以看出求贡献值的话，i和A[i]已知，而关键在于确定辐射范围（也就是求左边界left和右边界right）。

如何求取辐射范围呢？元素E是这个辐射范围的最小值，那么当从元素E的下标i向外扩展时，如果发现某个元素比E大，那么必定属于E的辐射范围，而如果某个元素比E小，那么肯定不属于这个辐射范围的（因为E是最小值，整个范围内不应该有比E更小的数）。

因此只要我们向左👈找到第一个比A[i]小的数A[left]以及向右👉找到第一个比E小的数A[right]，就可以确定E的辐射范围为A[left+1:right]。这就叫做[**下一个更小/更大的数问题**](https://leetcode-cn.com/problems/next-greater-element-i/)。解决这类问题的通用解法即为单调栈。

下面我们具体整理一下求解思路，分为三步：
1. 利用单调栈向左找到第一个比A[i]小的数A[left]（遍历顺序为0->n-1)，也就是E辐射范围的左边界；
2. 利用单调栈向右找到第一个比A[i]小的数A[right]（遍历顺序为n-1->0)，也就是E辐射范围的右边界；
3. 将每个元素的贡献值求和得到最终答案

下面动画介绍了left数组和right数组的计算过程：

<![leetcode-907-4.001.png](https://pic.leetcode-cn.com/1639836328-JzndgY-leetcode-907-4.001.png),![leetcode-907-4.002.png](https://pic.leetcode-cn.com/1639836340-iNmgxO-leetcode-907-4.002.png),![leetcode-907-4.003.png](https://pic.leetcode-cn.com/1639836344-jMlajx-leetcode-907-4.003.png),![leetcode-907-4.004.png](https://pic.leetcode-cn.com/1639836350-isLtHg-leetcode-907-4.004.png),![leetcode-907-4.005.png](https://pic.leetcode-cn.com/1639836353-sWxIQZ-leetcode-907-4.005.png),![leetcode-907-4.006.png](https://pic.leetcode-cn.com/1639836357-yerDmu-leetcode-907-4.006.png),![leetcode-907-4.007.png](https://pic.leetcode-cn.com/1639836364-LfnJMp-leetcode-907-4.007.png),![leetcode-907-4.008.png](https://pic.leetcode-cn.com/1639836374-BLTXwx-leetcode-907-4.008.png),![leetcode-907-4.009.png](https://pic.leetcode-cn.com/1639836377-gJKmho-leetcode-907-4.009.png),![leetcode-907-4.010.png](https://pic.leetcode-cn.com/1639836381-JfVVdy-leetcode-907-4.010.png),![leetcode-907-4.011.png](https://pic.leetcode-cn.com/1639836390-xiHhfs-leetcode-907-4.011.png),![leetcode-907-4.012.png](https://pic.leetcode-cn.com/1639836394-oeEwUR-leetcode-907-4.012.png),![leetcode-907-4.013.png](https://pic.leetcode-cn.com/1639836398-vHTDQu-leetcode-907-4.013.png),![leetcode-907-4.014.png](https://pic.leetcode-cn.com/1639836402-bsfZRA-leetcode-907-4.014.png),![leetcode-907-4.015.png](https://pic.leetcode-cn.com/1639836407-dPNuNn-leetcode-907-4.015.png),![leetcode-907-4.016.png](https://pic.leetcode-cn.com/1639836412-DTyXaj-leetcode-907-4.016.png)>

### 代码2

* 

```
class Solution {
    private static final int MOD = 1000000007;
    public int sumSubarrayMins(int[] arr) {
        // 处理边界情况
        if (arr == null || arr.length == 0) {
            return 0;
        }
        int n = arr.length;
        // 每个元素辐射范围的左边界
        int[] left = new int[n];
        // 每个元素辐射范围的右边界
        int[] right = new int[n];
        Deque<Integer> stack = new LinkedList<>();

        // 第一次循环先找到所有元素的左边界
        for (int i = 0; i < n; i++) {
            // 向左找第一个小于等于E的元素
            while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {
                stack.pop();
            }
            // 设立一个最左边界-1
            if (stack.isEmpty()) {
                left[i] = -1;
            } else {
                left[i] = stack.peek();
            }
            // 下标入栈，方便同时得到i和A[i]
            stack.push(i);
        }

        // 第二次循环找到所有元素的右边界
        stack.clear();
        for (int i = n - 1; i >= 0; i--) {
            // 向右找第一个小于E的元素
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            // 设立一个最右边界n
            if (stack.isEmpty()) {
                right[i] = n;
            } else {
                right[i] = stack.peek();
            }
            // 下标入栈，方便同时得到i和A[i]
            stack.push(i);
        }

        // 按照贡献度计算即可
        // 注意此处left[i]和right[i]实际上记录的是左边界-1和右边界+1，和上面思路中有些区别，便于计算
        long ans = 0;
        for (int i = 0; i < n; i++) {
            ans = (ans + (long)(i - left[i]) * (right[i] - i) * arr[i]) % MOD; 
        }
        return (int)ans;
    }
}
```

注意⚠️：在计算左边界或者右边界时将一侧设置为求解小于等于E的元素，目的是为了解决当一个子数组中有两个最小值元素时（比如[3,1,2,4,1]中有两个1），不重复且不遗漏地统计每一个子数组。

### 继续思考

上面代码逻辑比较清晰，但是经历了两次遍历且用到了额外空间，我们可以用更简洁的一次遍历来直接求出所有元素的左边界和右边界，并且不用额外空间。

如果不理解，可以先看一遍代码，再看我的后续解释。

### 代码3

* 

```
class Solution {
    private static final int MOD = 1000000007;

    // 重写根据下标取值方法，-1和n返回MIN_VALUE
    private int getElement(int[] arr, int n, int i) {
        if (i == -1 || i == n) {
            return Integer.MIN_VALUE;
        }
        return arr[i];
    }
    
    public int sumSubarrayMins(int[] arr) {
        // 处理边界情况
        if (arr == null || arr.length == 0) {
            return 0;
        }
        int n = arr.length;
        long ans = 0;
        Deque<Integer> stack = new LinkedList<>();
        // 将下标-1和n作为两个哨兵元素，它们对应的元素为MIN_VALUE
        // -1作为最左边界，n作为最右边界
        for (int i = -1; i <= n; i++) {
            // 向左寻找第一个小于等于A[i]的元素
            while (!stack.isEmpty() && getElement(arr, n, stack.peek()) > getElement(arr, n, i)) {
                // A[cur]就是之前思路中的A[i]，注意区分和上面代码的区别
                // 对于每个出栈元素来说，i就是它们的右边界，而栈顶元素就是左边界
                int cur = stack.pop();
                // 计算贡献值
                ans = (ans + (long)(cur - stack.peek()) * (i - cur) * arr[cur]) % MOD;
            }
            stack.push(i);
        }

        return (int)ans;
    }
}
```

上面的代码3实际上是代码2的逆向思维：
在代码2中我们会将每个大于当前元素A[i]的元素出栈以向左求解得到第一个小于A[i]的元素，那么反过来针对每个出栈的元素，当前元素A[i]不就是向右比它更小的第一个元素吗？这就得到了右边界。

每个大于当前元素A[i]的元素都会依次出栈，那么每个入栈元素的栈内相邻的下一个元素不就是向左比它更小的第一个元素吗？这就得到了左边界。

既然左右边界都能在一次遍历中得到，那么自然我们可以一次遍历就得到贡献值，且无需额外空间。

> 除此之外，代码中还有一些其他细节，比如设立哨兵-1和n，这样是为了简化代码。不这样做的话，需要增加很多判断条件，代码会比较繁琐。

本题解部分思路借鉴于[单调栈 Python3](https://leetcode-cn.com/problems/sum-of-subarray-minimums/solution/dan-diao-zhan-python3-by-smoon1989/)。

大家如有兴趣可以继续尝试下该题目的一道拓展题[2104. 子数组范围和](https://leetcode-cn.com/problems/sum-of-subarray-ranges/)，相信大家会有新的收获！

最后，如本题解对您有帮助，请点个赞支持下，非常感谢🙏！
