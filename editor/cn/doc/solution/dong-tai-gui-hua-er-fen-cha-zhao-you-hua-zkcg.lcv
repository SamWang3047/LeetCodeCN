#### 提示 1

将工作按照结束时间排序，以示例 2 为例，得到下图：

![](https://pic.leetcode.cn/1666245025-aURzDO-20221020.drawio%20(4).png)

手动计算一下，按照结束时间排序后：

- 前 $1$ 个工作的最大报酬为 $20$；
- 前 $2$ 个工作的最大报酬为 $20$；
- 前 $3$ 个工作的最大报酬为前 $1$ 个工作的最大报酬 $+70=20+70=90$；
- 前 $4$ 个工作的最大报酬为前 $3$ 个工作的最大报酬 $+60=90+60=150$；
- 前 $5$ 个工作的最大报酬，如果选了第 $5$ 个工作，那么报酬为前 $1$ 个工作的最大报酬 $+100=20+100=120$；但也可以不选第 $5$ 个工作，报酬为前 $4$ 个工作的最大报酬，即 $150$。由于 $150>120$，不选第 $5$ 个工作更好，因此前 $5$ 个工作的最大报酬为 $150$。

示例 2 等价于计算前 $5$ 个工作的最大报酬，即 $150$。

#### 提示 2

总结一下，我们可以分类讨论，求出按照结束时间排序后的**前** $i$ 个工作的最大报酬：

- 不选**第** $i$ 个工作，那么最大报酬等于**前** $i-1$ 个工作的最大报酬（转换成了一个规模更小的子问题）；
- 选**第** $i$ 个工作，由于工作时间不能重叠，设 $j$ 是最大的满足 $\textit{endTime}[j]\le\textit{startTime}[i]$ 的 $j$，那么最大报酬等于**前** $j$ 个工作的最大报酬加上 $\textit{profit}[i]$（同样转换成了一个规模更小的子问题）；
- 这两种决策取最大值。

> 注：由于按照结束时间排序，**前** $j$ 个工作中的任意一个都不会与**第** $i$ 个工作的时间重叠。

#### 提示 3

怎么实现？

上述思路是一个标准的关于**递推**的描述，定义 $f[i]$ 表示按照结束时间排序后的**前** $i$ 个工作的最大报酬，分类讨论：

- 不选**第** $i$ 个工作：$f[i] = f[i-1]$；
- 选**第** $i$ 个工作：$f[i] = f[j]+\textit{profit}[i]$，其中 $j$ 是最大的满足 $\textit{endTime}[j]\le\textit{startTime}[i]$ 的 $j$，不存在时为 $-1$。

两者取最大值，即

$$
f[i] = \max(f[i-1], f[j]+\textit{profit}[i])
$$

代码实现时，为避免处理 $-1$，可将与 $f$ 有关的下标都 $+1$，即

$$
f[i+1] = \max(f[i], f[j+1]+\textit{profit}[i])
$$

初始项 $f[0]=0$，答案为 $f[n]$。

代码实现时，由于结束时间是有序的，$j$ 可以用二分查找计算出来。

* [sol1-Python3]

```py
class Solution:
    def jobScheduling(self, startTime: List[int], endTime: List[int], profit: List[int]) -> int:
        jobs = sorted(zip(endTime, startTime, profit))  # 按照结束时间排序
        f = [0] * (len(jobs) + 1)
        for i, (_, st, p) in enumerate(jobs):
            j = bisect_right(jobs, (st, inf), hi=i)  # hi=i 表示二分上界为 i（默认为 n）
            f[i + 1] = max(f[i], f[j] + p)  # 为什么是 j 不是 j+1：上面算的是 > st，-1 后得到 <= st，但由于还要 +1，抵消了
        return f[-1]
```

* [sol1-Java]

```java
class Solution {
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        var n = startTime.length;
        var jobs = new int[n][];
        for (var i = 0; i < n; ++i)
            jobs[i] = new int[]{startTime[i], endTime[i], profit[i]};
        Arrays.sort(jobs, (a, b) -> a[1] - b[1]); // 按照结束时间排序

        var f = new int[n + 1];
        for (var i = 0; i < n; ++i) {
            var j = search(jobs, i, jobs[i][0]);
            f[i + 1] = Math.max(f[i], f[j + 1] + jobs[i][2]);
        }
        return f[n];
    }

    // 返回 endTime <= upper 的最大下标
    private int search(int[][] jobs, int right, int upper) {
        var left = -1;
        while (left + 1 < right) {
            var mid = (left + right) / 2;
            if (jobs[mid][1] <= upper) left = mid;
            else right = mid;
        }
        return left;
    }
}
```

* [sol1-C++]

```cpp
class Solution {
public:
    int jobScheduling(vector<int> &startTime, vector<int> &endTime, vector<int> &profit) {
        int n = startTime.size();
        array<int, 3> jobs[n];
        for (int i = 0; i < n; ++i)
            jobs[i] = {endTime[i], startTime[i], profit[i]};
        sort(jobs, jobs + n, [](auto &a, auto &b) { return a[0] < b[0]; }); // 按照结束时间排序

        int f[n + 1];
        f[0] = 0;
        for (int i = 0; i < n; ++i) {
            int j = upper_bound(jobs, jobs + i, array<int, 3>{jobs[i][1], INT_MAX}) - jobs;
            // 为什么是 j 不是 j+1：上面算的是 > 开始时间，-1 后得到 <= 开始时间，但由于还要 +1，抵消了
            f[i + 1] = max(f[i], f[j] + jobs[i][2]);
        }
        return f[n];
    }
};
```

* [sol1-Go]

```go
func jobScheduling(startTime, endTime, profit []int) int {
	n := len(startTime)
	type job struct{ start, end, profit int }
	jobs := make([]job, n)
	for i, start := range startTime {
		jobs[i] = job{start, endTime[i], profit[i]}
	}
	sort.Slice(jobs, func(i, j int) bool { return jobs[i].end < jobs[j].end }) // 按照结束时间排序

	f := make([]int, n+1)
	for i, job := range jobs {
		j := sort.Search(i, func(j int) bool { return jobs[j].end > job.start })
		// 为什么是 j 不是 j+1：上面算的是 > start，-1 后得到 <= start，但由于还要 +1，抵消了
		f[i+1] = max(f[i], f[j]+job.profit)
	}
	return f[n]
}

func max(a, b int) int { if b > a { return b }; return a }
```

#### 编程小课堂 · 标准库二分的灵活运用

在写二分题目时，经常会遇到形如「在有序数组中查询大于某个数的最小数」这类问题。具体来说有四类：

- $\ge$：在有序数组中查询大于或等于某个数的最小数；
- $>$：在有序数组中查询大于某个数的最小数；
- $\le$：在有序数组中查询小于或等于某个数的最大数；
- $<$：在有序数组中查询小于某个数的最大数。

上面的 Python/C++/Go 代码都中用到了标准库中的二分，但这些二分在设计的时候，只提供了查询 $\ge$ 和 $>$ 的功能，并没有提供查询 $\le$ 和 $<$ 的功能。

没有关系，稍微转换下就能解决。比如查询 $>$ 得到了下标 $i$，那么 $i-1$ 就是 $\le$ 的结果了（假设数组为升序），同理 $<$ 可以用 $\ge$ 算出来。

> 注：$>$ 和 $\ge$ 也可以转换，对于整数来说，$> x$ 等价于 $\ge x+1$。

#### 复杂度分析

- 时间复杂度：$O(n\log n)$，其中 $n$ 为 $\textit{startTime}$ 的长度。排序的时间复杂度为 $O(n\log n)$，动态规划部分一共计算了 $n$ 次二分，时间复杂度为 $O(n\log n)$，因此总的时间复杂度为 $O(n\log n)$。
- 空间复杂度：$O(n)$。

#### 相似题目

- [1751. 最多可以参加的会议数目 II](https://leetcode.cn/problems/maximum-number-of-events-that-can-be-attended-ii/)
- [2008. 出租车的最大盈利](https://leetcode.cn/problems/maximum-earnings-from-taxi/)

---

欢迎关注我的B站频道：[灵茶山艾府](https://space.bilibili.com/206214)，每周更新算法讲解视频哦~
