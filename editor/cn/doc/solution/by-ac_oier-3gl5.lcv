## 模拟

根据题意进行模拟即可 : 为了方便判断某个 $node.val$ 是否存在于 `nums` 中，我们先使用 `Set` 结构对所有的 $nums[i]$ 进行转存，随后每次检查连续段（组件）的个数。

代码：

* []

```Java
class Solution {
    public int numComponents(ListNode head, int[] nums) {
        int ans = 0;
        Set<Integer> set = new HashSet<>();
        for (int x : nums) set.add(x);
        while (head != null) {
            if (set.contains(head.val)) {
                while (head != null && set.contains(head.val)) head = head.next;
                ans++;
            } else {
                head = head.next;
            }
        }
        return ans;
    }
}
```

* []

```TypeScript
function numComponents(head: ListNode | null, nums: number[]): number {
    let ans = 0
    const set = new Set<number>()
    for (const x of nums) set.add(x)
    while (head != null) {
        if (set.has(head.val)) {
            while (head != null && set.has(head.val)) head = head.next
            ans++
        } else {
            head = head.next
        }
    }
    return ans
}
```

* []

```Python
class Solution:
    def numComponents(self, head: Optional[ListNode], nums: List[int]) -> int:
        ans = 0
        nset = set(nums)
        while head:
            if head.val in nset:
                while head and head.val in nset:
                    head = head.next
                ans += 1
            else:
                head = head.next
        return ans
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
