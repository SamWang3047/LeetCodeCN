## 数据结构

显然，对于任意一个 $t = nums2[i]$ 而言，我们应当在候选集合中选择**比其大的最小数**，若不存在这样的数字，则选择候选集合中的**最小值**。

同时，由于 $nums1$ 相同数会存在多个，我们还要对某个具体数字的可用次数进行记录。

也就是我们总共涉及两类操作：

1. 实时维护一个候选集合，该集合支持高效查询比某个数大的数值操作；
2. 对候选集合中每个数值的可使用次数进行记录，当使用到了候选集合中的某个数后，要对其进行计数减一操作，若计数为 $0$，则将该数值从候选集合中移除。

计数操作容易想到哈希表，而实时维护候选集合并高效查询可以使用基于红黑树的 `TreeSet` 数据结构。

代码：

* []

```Java
class Solution {
    public int[] advantageCount(int[] nums1, int[] nums2) {
        int n = nums1.length;
        TreeSet<Integer> tset = new TreeSet<>();
        Map<Integer, Integer> map = new HashMap<>();
        for (int x : nums1) {
            map.put(x, map.getOrDefault(x, 0) + 1);
            if (map.get(x) == 1) tset.add(x);
        }
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            Integer cur = tset.ceiling(nums2[i] + 1);
            if (cur == null) cur = tset.ceiling(-1);
            ans[i] = cur;
            map.put(cur, map.get(cur) - 1);
            if (map.get(cur) == 0) tset.remove(cur);
        }
        return ans;
    }
}
```

* []

```Python
from sortedcontainers import SortedList

class Solution:
    def advantageCount(self, nums1: List[int], nums2: List[int]) -> List[int]:
        n = len(nums1)
        cnts, tset = defaultdict(int), SortedList()
        for i in range(n):
            cnts[nums1[i]] += 1
            if cnts[nums1[i]] == 1:
                tset.add(nums1[i])
        ans = [0] * n
        for i in range(n):
            t = nums2[i]
            if (idx := tset.bisect_left(t + 1)) == len(tset):
                idx = tset.bisect_left(-1)
            ans[i] = tset[idx]
            cnts[ans[i]] -= 1
            if cnts[ans[i]] == 0:
                tset.remove(ans[i])
        return ans
```

* 时间复杂度：$O(n\log{n})$
* 空间复杂度：$O(n)$

---

## 加餐

**节后第一天，加餐一道同类型题目 : [难度 2.5/5，敲醒沉睡心灵的数据结构运用题](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247493710&idx=1&sn=2d6d4ee9f4b1ff1ea766ddf7ea57bf55) 🎉🎉**

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
