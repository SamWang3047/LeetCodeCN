#### 方法一：排序

字符串 $s_1$ 和 $s_2$ 互为字符重排等价于「两个字符串排序后相等」。因此我们可以对字符串 $s_1$ 和 $s_2$ 分别排序，看排序后的字符串是否相等即可判断。此外，如果 $s_1$ 和 $s_2$ 的长度不同，$s_2$ 必然不是 $s_1$ 的异位词。

* [sol1-Java]

```Java
class Solution {
    public boolean CheckPermutation(String s1, String s2) {
        if (s1.length() != s2.length()) {
            return false;
        }
        char[] str1 = s1.toCharArray();
        char[] str2 = s2.toCharArray();
        Arrays.sort(str1);
        Arrays.sort(str2);
        return Arrays.equals(str1, str2);
    }
}
```

* [sol1-JavaScript]

```JavaScript
var CheckPermutation = function(s1, s2) {
    return s1.length == s2.length && [...s1].sort().join('') === [...s2].sort().join('')
};
```

* [sol1-C++]

```C++
class Solution {
public:
    bool CheckPermutation(string s1, string s2) {
        if (s1.length() != s2.length()) {
            return false;
        }
        sort(s1.begin(), s1.end());
        sort(s2.begin(), s2.end());
        return s1 == s2;
    }
};
```

* [sol1-Golang]

```Golang
func CheckPermutation(s1 string, s2 string) bool {
    b1, b2 := []byte(s1), []byte(s2)
    sort.Slice(b1, func(i, j int) bool { return b1[i] < b1[j] })
    sort.Slice(b2, func(i, j int) bool { return b2[i] < b2[j] })
    return string(b1) == string(b2)
}
```

* [sol1-C]

```C
int cmp(const void* _a, const void* _b) {
    char a = *(char*)_a, b = *(char*)_b;
    return a - b;
}

bool CheckPermutation(char* s1, char* s2) {
    int len_s1 = strlen(s1), len_s2 = strlen(s2);
    if (len_s1 != len_s2) {
        return false;
    }
    qsort(s1, len_s1, sizeof(char), cmp);
    qsort(s2, len_s2, sizeof(char), cmp);
    return strcmp(s1, s2) == 0;
}
```

**复杂度分析**

* 时间复杂度：$O(n \log n)$，其中 $n$ 为 $s_1$ 的长度。排序的时间复杂度为 $O(n\log n)$，比较两个字符串是否相等时间复杂度为 $O(n)$，因此总体时间复杂度为 $O(n \log n+n)=O(n\log n)$。

* 空间复杂度：$O(\log n)$。排序需要 $O(\log n)$ 的空间复杂度。注意，在某些语言（比如 Java & JavaScript）中字符串是不可变的，因此我们需要额外的 $O(n)$ 的空间来拷贝字符串。但是我们忽略这一复杂度分析，因为：
  * 这依赖于语言的细节；
  * 这取决于函数的设计方式，例如，可以将函数参数类型更改为 `char[]`。

#### 方法二：哈希表

从另一个角度考虑，字符串 $s_1$ 和 $s_2$ 互为字符重排等价于「两个字符串中字符出现的种类和次数均相等」。由于字符串只包含 $128$ 种不同的字符，因此我们可以维护一个长度为 $128$ 的频次数组 $\textit{table}$，先遍历记录字符串 $s_1$ 中字符出现的频次，然后遍历字符串 $s_2$，减去 $\textit{table}$ 中对应的频次，如果出现 $\textit{table}[i]<0$，则说明 $s_2$ 包含一个不在 $s_1$ 中的额外字符，返回 $\text{false}$ 即可。

* [sol2-Java]

```Java
class Solution {
    public boolean CheckPermutation(String s1, String s2) {
        if (s1.length() != s2.length()) {
            return false;
        }
        int[] table = new int[128];
        for (int i = 0; i < s1.length(); i++) {
            table[s1.charAt(i)]++;
        }
        for (int i = 0; i < s2.length(); i++) {
            table[s2.charAt(i)]--;
            if (table[s2.charAt(i)] < 0) {
                return false;
            }
        }
        return true;
    }
}
```

* [sol2-JavaScript]

```JavaScript
var CheckPermutation = function(s1, s2) {
    if (s1.length !== s2.length) {
        return false;
    }
    const table = new Array(128).fill(0);
    for (let i = 0; i < s1.length; ++i) {
        table[s1.codePointAt(i)]++;
    }
    for (let i = 0; i < s2.length; ++i) {
        table[s2.codePointAt(i)]--;
        if (table[s2.codePointAt(i)] < 0) {
            return false;
        }
    }
    return true;
};
```

* [sol2-C++]

```C++
class Solution {
public:
    bool CheckPermutation(string s1, string s2) {
        if (s1.length() != s2.length()) {
            return false;
        }
        vector<int> table(128, 0);
        for (auto& ch: s1) {
            table[ch]++;
        }
        for (auto& ch: s2) {
            table[ch]--;
            if (table[ch] < 0) {
                return false;
            }
        }
        return true;
    }
};
```

* [sol2-Golang]

```Golang
func CheckPermutation(s1 string, s2 string) bool {
    var c1, c2 [128]int
    for _, ch := range s1 {
        c1[ch]++
    }
    for _, ch := range s2 {
        c2[ch]++
    }
    return c1 == c2
}
```

* [sol2-C]

```C
bool CheckPermutation(char* s1, char* s2) {
    int len_s1 = strlen(s1), len_s2 = strlen(s2);
    if (len_s1 != len_s2) {
        return false;
    }
    int table[128];
    memset(table, 0, sizeof(table));
    for (int i = 0; i < len_s1; ++i) {
        table[s1[i]]++;
    }
    for (int i = 0; i < len_s2; ++i) {
        table[s2[i]]--;
        if (table[s2[i]] < 0) {
            return false;
        }
    }
    return true;
}
```

**复杂度分析**

* 时间复杂度：$O(n)$，其中 $n$ 为 $s_1$ 的长度。

* 空间复杂度：$O(S)$，其中 $S$ 为字符集大小，此处 $S=128$。

