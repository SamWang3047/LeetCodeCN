> “今以君之下驷与彼上驷，取君上驷与彼中驷，取君中驷与彼下驷。”既驰三辈毕，而田忌一不胜而再胜，卒得王千金。

把 $\textit{nums}_1$ 当成是田忌的马，$\textit{nums}_2$ 当成是齐威王的马。

讨论田忌的下等马（$\textit{nums}_1$ 的最小值）：

- 如果它能比过齐威王的下等马（$\textit{nums}_2$ 的最小值），那这一分田忌直接拿下；
- 如果它比不过齐威王的下等马，则用田忌的下等马比齐威王的上等马（$\textit{nums}_2$ 的最大值）。

去掉这两匹马，问题变成一个规模更小（$n-1$）的子问题。重复上述过程，即得到了所有马的对应关系。

代码实现时，由于 $\textit{nums}_2$ 不能排序，我们可以创建一个下标数组 $\textit{ids}$，对$\textit{ids}$ 排序，即 $\textit{ids}[0]$ 对应 $\textit{nums}_2$ 中最小值的下标，$\textit{ids}[1]$ 对应 $\textit{nums}_2$ 中第二小值的下标，……。用双指针操作 $\textit{ids}$，从而知道每个下标所要对应的 $\textit{nums}_1$ 的元素，也就找到了所要求的 $\textit{nums}_1$ 的排列。

* [sol1-Python3]

```py
class Solution:
    def advantageCount(self, nums1: List[int], nums2: List[int]) -> List[int]:
        n = len(nums1)
        ans = [0] * n
        nums1.sort()
        ids = sorted(range(n), key=lambda i: nums2[i])
        left, right = 0, n - 1
        for x in nums1:
            if x > nums2[ids[left]]:
                ans[ids[left]] = x  # 用下等马比下等马
                left += 1
            else:
                ans[ids[right]] = x  # 用下等马比上等马
                right -= 1
        return ans
```

* [sol1-Java]

```java
class Solution {
    public int[] advantageCount(int[] nums1, int[] nums2) {
        var n = nums1.length;
        var ans = new int[n];
        Arrays.sort(nums1);
        var ids = IntStream.range(0, n).boxed().toArray(Integer[]::new);
        Arrays.sort(ids, (i, j) -> nums2[i] - nums2[j]);
        int left = 0, right = n - 1;
        for (var x : nums1)
            ans[x > nums2[ids[left]] ? ids[left++] : ids[right--]] = x;
        return ans;
    }
}
```

* [sol1-C++]

```cpp
class Solution {
public:
    vector<int> advantageCount(vector<int> &nums1, vector<int> &nums2) {
        int n = nums1.size(), ids[n];
        vector<int> ans(n);
        sort(nums1.begin(), nums1.end());
        iota(ids, ids + n, 0);
        sort(ids, ids + n, [&](int i, int j) { return nums2[i] < nums2[j]; });
        int left = 0, right = n - 1;
        for (int x : nums1)
            ans[x > nums2[ids[left]] ? ids[left++] : ids[right--]] = x;
        return ans;
    }
};
```

* [sol1-Go]

```go
func advantageCount(nums1, nums2 []int) []int {
	n := len(nums1)
	ans := make([]int, n)
	sort.Ints(nums1)
	ids := make([]int, n)
	for i := range ids {
		ids[i] = i
	}
	sort.Slice(ids, func(i, j int) bool { return nums2[ids[i]] < nums2[ids[j]] })
	left, right := 0, n-1
	for _, x := range nums1 {
		if x > nums2[ids[left]] {
			ans[ids[left]] = x // 用下等马比下等马
			left++
		} else {
			ans[ids[right]] = x // 用下等马比上等马
			right--
		}
	}
	return ans
}
```

#### 复杂度分析

- 时间复杂度：$O(n\log n)$，其中 $n$ 是 $\textit{nums}_1$ 的长度。
- 空间复杂度：$O(n)$。

---

欢迎关注我的B站频道：[灵茶山艾府](https://space.bilibili.com/206214)，定期更新算法讲解视频哦~
