![图解每日一练.jpg](https://pic.leetcode-cn.com/1615817903-fzmpwZ-%E5%9B%BE%E8%A7%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E7%BB%83.jpg)

---

### 🧠 解题思路

数组存在重复元素，首先我们可以将数组排序，然后再遍历判断，但是这样的复杂度是 $NlogN$，但是，我一般会选择牺牲空间保时间，所以这里我将使用哈希表来解决这道题，让时间复杂度为 $N$。

流程如下：

1. 创建一个哈希表，然后从左往右遍历数组。
2. 检测哈希表中是否已存在当前字符，若存在，直接返回结果，若不存在，将当前字符加入哈希表，供后续判断使用即可。

---

### 🎨 图解演示

<![1615992160-zFMMiq-1.jpeg](https://pic.leetcode-cn.com/1616900366-SHrRDN-1615992160-zFMMiq-1.jpeg),![2.jpg](https://pic.leetcode-cn.com/1615992162-PsBrZi-2.jpg),![3.jpg](https://pic.leetcode-cn.com/1615992164-jCgXgE-3.jpg),![4.jpg](https://pic.leetcode-cn.com/1615992166-hVJzbA-4.jpg)>

---

### 🍭 示例代码

* []

```Javascript
var containsDuplicate = function(nums) {
    let map = new Map();
    for(let i of nums){
        if(map.has(i)){
            return true;
        }else{
            map.set(i, 1);
        }
    }
    return false;
};
```

* []

```C++
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        unordered_set<int> s;
        for (int x: nums) {
            if (s.find(x) != s.end()) {
                return true;
            }
            s.insert(x);
        }
        return false;
    }
};
```

* []

```C
struct hashTable {
    int key;
    UT_hash_handle hh;
};

bool containsDuplicate(int* nums, int numsSize) {
    struct hashTable* set = NULL;
    for (int i = 0; i < numsSize; i++) {
        struct hashTable* tmp;
        HASH_FIND_INT(set, nums + i, tmp);
        if (tmp == NULL) {
            tmp = malloc(sizeof(struct hashTable));
            tmp->key = nums[i];
            HASH_ADD_INT(set, key, tmp);
        } else {
            return true;
        }
    }
    return false;
}
```

* []

```Java
class Solution {
    public boolean containsDuplicate(int[] nums) {
        Set<Integer> set = new HashSet<Integer>();
        for (int x : nums) {
            if (!set.add(x)) {
                return true;
            }
        }
        return false;
    }
}
```

* []

```Golang
func containsDuplicate(nums []int) bool {
    set := map[int]struct{}{}
    for _, v := range nums {
        if _, has := set[v]; has {
            return true
        }
        set[v] = struct{}{}
    }
    return false
}
```

---

### 转身挥手

嘿，少年，做图不易，留下个赞或评论再走吧！谢啦~ 💐

差点忘了，祝你牛年大吉 🐮 ，AC 和 Offer 📑 多多益善~

⛲⛲⛲ 期待下次再见~
