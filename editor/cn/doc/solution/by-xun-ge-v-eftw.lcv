### 解题思路

对于C库函数哈希算法不熟悉可以看[哈希算法详解](http://t.csdn.cn/zwuNI)
题目要求找未出现的数，最简单的办法就是暴力循环，枚举每一个数，判断那些数未出现，最后输出即可。
**进阶：你能在不使用额外空间且时间复杂度为 O(n) 的情况下解决这个问题吗? 你可以假定返回的数组不算在额外空间内。**
**提供两个思路**
1. 原地修改，官方题解思路，先遍历nums数组，进行简单处理，然后将为被处理的下标保存输出
2. 哈希表，申请空间ans，作为简单哈希表，当nums[i]出现时，将ans对应的下标至 1 ，记录出现元素，`ans[nums[i]] = 1`最后遍历数组ans，将未出现的元素下标保存输出，可能会疑问不是申请了额外空间吗？不满足进阶要求，但是我们可以将额外空间和输出空间合并为一个空间，即做输出又做记录

### 代码

**原地修改**

* 

```
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
/*
*int* findDisappearedNumbers(int* nums, int numsSize, int* returnSize)
int* findDisappearedNumbers：寻找数组中为出现的元素
int* nums：数组
int numsSize：数组下标
int* returnSize:返回值长度
返回值：未出现的元素
*/
int* findDisappearedNumbers(int* nums, int numsSize, int* returnSize) {
    for (int i = 0; i < numsSize; i++) {//将输出元素进行处理
        int x = (nums[i] - 1) % numsSize;
        nums[x] += numsSize;
    }
    int* ret = malloc(sizeof(int) * numsSize);
    *returnSize = 0;
    for (int i = 0; i < numsSize; i++) {
        if (nums[i] <= numsSize) {//保存为被处理的下标
            ret[(*returnSize)++] = i + 1;
        }
    }
    return ret;
}
```

**哈希表**

* c

```c
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
/*
*int* findDisappearedNumbers(int* nums, int numsSize, int* returnSize)
int* findDisappearedNumbers：寻找数组中为出现的元素
int* nums：数组
int numsSize：数组下标
int* returnSize:返回值长度
返回值：未出现的元素
*/
int* findDisappearedNumbers(int* nums, int numsSize, int* returnSize){
    int * ans = malloc(sizeof(int)* (numsSize+1));//申请空间，作为简易哈希表
    for(int i = 0; i< numsSize; i++)
    {
        ans[nums[i]] = 1;//记录出现元素
    }
    *returnSize = 0;
    for(int i = 1; i <= numsSize; i++)
    {
        if(ans[i] != 1)//对为出现的元素保存输出
        {
            ans[(*returnSize)++] = i;
        }
    }
    return ans;
}

```

