### 解题思路

此处撰写解题思路

### 代码

* java

```java
class Solution {
  //560：连续子数组和区间个数
        //暴力思路：前缀和+双层循环：O（n^2）
        //优化：前缀和+哈希表直接查找
        //哈希表：键是前缀和的值，值是出现的次数
        //连续子数组和：k= sum560[j]-sum560[i-1]  等于了后面前缀和-前面前缀和
	    //sum560[i-1]=sum560[j]-k    也就是说当遍历到j的前缀和时，只需要考虑i<j且sum560[i-1]等于了特定值的前缀和出现的次数即可
        //*****非常巧妙：边计算便更新：当哈希表存储到j时候，哈希表里面的都是i<j的前缀和，所以可以直接取用。
        public int subarraySum(int[] nums, int k) {
        	HashMap<Integer,Integer> hash=new HashMap<>();
        	int sum=0;
        	int count=0;
        	hash.put(0, 1);                                       //*****千万不能忘了，如果i=0.直接j的前缀和也可能满足条件，所以必须要加一个，0元素的前缀和出现次数为1
        	for(int num:nums) {
        		sum+=num;
        		if(hash.containsKey(sum-k)) {
        			count+=hash.get(sum-k);
        		}
        		hash.put(sum, hash.getOrDefault(sum, 0)+1);
        	}
        	return count;
        }
}
```

