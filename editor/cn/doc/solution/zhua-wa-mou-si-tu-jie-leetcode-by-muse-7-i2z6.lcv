# 解题思路

根据题目描述，我们可以采用双指针的方式来模拟创建这个“神奇字符串”。其中，**p指针每次移动都是+1的，magic[p]表示第p组里有多少个元素。tail指针指向的是待赋值的元素位置。** 那么，我们先向magic数组中初始化`magic[0]=1`，表示第0组有1个元素，值为1。那么，**由于每个组内的元素值是“1”和“2”交替出现的**，那么就可以推断出下面每个组元素个数，以及元素的值了。具体请见下图所示：

![image.png](https://pic.leetcode.cn/1667179415-Cmxuhp-image.png)

## 问题：数字1和2如何相互转换

当某一位上的任意值a（0或1）与`1`执行按位异或操作时，具有“**按位翻转**”的作用。即：0翻转为1，1翻转为0。而当某一位上的任意值a（0或1）与`0`执行按位异或操作时，则会**将a原样输出**。具体如下所示：

> `0` ^ **1** = 1（0被按位翻转为1）
> `1` ^ **1** = 0（1被按位翻转为0）
> `0` ^ **0** = 0（0被原样输出）
> `1` ^ **0** = 1（1被原样输出）

当我们了解到了异或的按位翻转功能，就可以通过采用**与3进行异或**方式将数字1和2相互转换。

![image.png](https://pic.leetcode.cn/1667179448-ymSZFw-image.png)

时间复杂度：O(n)，其中 n 为字符串 `s` 的长度。

# 代码实现

* java

```java
class Solution {
    public int magicalString(int n) {
        int[] magic = new int[n + 1]; // 用于存储神奇数字集合
        magic[0] = 1; // 初始化第1个元素为0
        int tail = 1, p = 1, result = 1, value = 1, count = 2;
        while (tail < n) {
            value = value ^ 3; // 确定第"p"组内元素的值"value"是多少。(通过与3异或，可以将1和2互换)
            while(count-- > 0 && tail < n) { // 循环创建第"p"组内的"count"个元素，每个元素的值都是"value"
                magic[tail++] = value;
                if (value == 1) result++; // 如果发现元素的值"value"是1，则将"result"加1
            }
            count = magic[++p]; // 创建完第"p"组所有元素之后，获得下一组(即："p+1")需要创建的数字个数"count"
        }
        return result;
    }
}
```

![image.png](https://pic.leetcode.cn/1667179456-ivNrEG-image.png)

今天的文章内容就这些了：

> 写作不易，笔者几个小时甚至数天完成的一篇文章，只愿换来您几秒钟的 **点赞** & **分享** 。

更多技术干货，欢迎大家关注公众号“**爪哇缪斯**” ~ \\(^o^)/ ~ 「干货分享，每天更新」
