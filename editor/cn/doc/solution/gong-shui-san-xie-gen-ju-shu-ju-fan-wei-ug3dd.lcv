## 基本分析

我们称一个解码内容为一个 `item`。

为根据题意，每个 `item` 可以由一个数字组成，也可以由两个数字组成。

数据范围为 100，很具有迷惑性，可能会有不少同学会想使用 DFS 进行爆搜。

我们可以大致分析一下这样的做法是否可行：不失一般性的考虑字符串 `s` 中的任意位置 `i`，位置 `i` 既可以作为一个独立 `item`，也可以与上一位置组成新 `item`，那么相当于每个位置都有两种分割选择（先不考虑分割结果的合法性问题），这样做法的复杂度是 $O(2^n)$ 的，当 `n` 范围是 100 时，远超我们计算机单秒运算量（$10^7$）。即使我们将「判断分割结果是否合法」的操作放到爆搜过程中做剪枝，也与我们的单秒最大运算量相差很远。

递归的方法不可行，我们需要考虑递推的解法。

***

## 动态规划

**这其实是一道字符串类的动态规划题，不难发现对于字符串 `s` 的某个位置 `i` 而言，我们只关心「位置 `i` 自己能否形成独立 `item` 」和「位置 `i` 能够与上一位置（`i-1`）能否形成 `item`」，而不关心 `i-1` 之前的位置。**

有了以上分析，我们可以从前往后处理字符串 `s`，使用一个数组记录以字符串 `s` 的每一位作为结尾的解码方案数。即定义 $f[i]$ 为考虑前 $i$ 个字符的解码方案数。

对于字符串 `s` 的任意位置 `i` 而言，其存在三种情况：

* 只能由位置 `i` 的单独作为一个 `item`，设为 `a`，转移的前提是 `a` 的数值范围为 $[1,9]$，转移逻辑为 $f[i] = f[i - 1]$。
* 只能由位置 `i` 的与前一位置（`i-1`）共同作为一个 `item`，设为 `b`，转移的前提是 `b` 的数值范围为 $[10,26]$，转移逻辑为 $f[i] = f[i - 2]$。
* 位置 `i` 既能作为独立 `item` 也能与上一位置形成 `item`，转移逻辑为 $f[i] = f[i - 1] + f[i - 2]$。

因此，我们有如下转移方程：

$$
\begin{cases}

f[i] = f[i - 1], 1 \leqslant a \leq 9 \\

f[i] = f[i - 2], 10 \leqslant b \leqslant 26 \\

f[i] = f[i - 1] + f[i - 2], 1 \leqslant a \leq 9, 10 \leqslant b \leqslant 26 \\

\end{cases}

$$

其他细节：由于题目存在前导零，而前导零属于无效 `item`。可以进行特判，但个人习惯往字符串头部追加空格作为哨兵，追加空格既可以避免讨论前导零，也能使下标从 1 开始，简化 `f[i-1]` 等负数下标的判断。

代码：

* []

```Java
class Solution {
    public int numDecodings(String s) {
        int n = s.length();
        s = " " + s;
        char[] cs = s.toCharArray();
        int[] f = new int[n + 1];
        f[0] = 1;
        for (int i = 1; i <= n; i++) { 
            // a : 代表「当前位置」单独形成 item
            // b : 代表「当前位置」与「前一位置」共同形成 item
            int a = cs[i] - '0', b = (cs[i - 1] - '0') * 10 + (cs[i] - '0');
            // 如果 a 属于有效值，那么 f[i] 可以由 f[i - 1] 转移过来
            if (1 <= a && a <= 9) f[i] = f[i - 1];
            // 如果 b 属于有效值，那么 f[i] 可以由 f[i - 2] 或者 f[i - 1] & f[i - 2] 转移过来
            if (10 <= b && b <= 26) f[i] += f[i - 2];
        }
        return f[n];
    }
}
```

* []

```C++
class Solution {
public:
    int numDecodings(string s) {
        int n = s.size();
        s = " " + s;
        vector<int> f(n + 1,0);
        f[0] = 1;        
        for(int i = 1; i < n + 1; i++) {
            int a = s[i] - '0', b = (s[i - 1] - '0') * 10 + s[i] - '0';
            if(1 <= a && a <= 9) f[i] = f[i - 1];
            if(10 <= b && b <= 26) f[i] += f[i - 2];
        }
        return f[n];
    }
};
```

* []

```Python
class Solution:
    def numDecodings(self, s: str) -> int:
        n = len(s)
        s = ' ' + s
        f = [0] * (n + 1)
        f[0] = 1
        for i in range(1,n + 1):
            a = ord(s[i]) - ord('0')
            b = ( ord(s[i - 1]) - ord('0') ) * 10 + ord(s[i]) - ord('0')
            if 1 <= a <= 9:
                f[i] = f[i - 1]
            if 10 <= b <= 26:
                f[i] += f[i - 2]
        return f[n]
```

* 时间复杂度：共有 `n` 个状态需要被转移。复杂度为 $O(n)$。
* 空间复杂度：$O(n)$。

***

## 空间优化

不难发现，我们转移 `f[i]` 时只依赖 `f[i-1]` 和 `f[i-2]` 两个状态。

因此我们可以采用与「滚动数组」类似的思路，只创建长度为 3 的数组，通过取余的方式来复用不再需要的下标。

代码：

* []

```Java
class Solution {
    public int numDecodings(String s) {
        int n = s.length();
        s = " " + s;
        char[] cs = s.toCharArray();
        int[] f = new int[3];
        f[0] = 1;
        for (int i = 1; i <= n; i++) {
            f[i % 3] = 0;
            int a = cs[i] - '0', b = (cs[i - 1] - '0') * 10 + (cs[i] - '0');
            if (1 <= a && a <= 9) f[i % 3] = f[(i - 1) % 3];
            if (10 <= b && b <= 26) f[i % 3] += f[(i - 2) % 3];
        }
        return f[n % 3];
    }
}
```

* []

```C++
class Solution {
public:
    int numDecodings(string s) {
        int n = s.size();
        s = " " + s;
        int f[3];
        memset(f, 0, sizeof(f));
        f[0] = 1;
        for(int i = 1; i <= n; i++) {
            f[i % 3] = 0;
            int a = s[i] - '0', b = (s[i - 1] - '0') * 10 + s[i] - '0';
            if(1 <= a && a <= 9) f[i % 3] = f[(i - 1) % 3];
            if(10 <= b && b <= 26) f[i % 3] += f[(i - 2) % 3];
        }
        return f[n % 3];
    }
};
```

* []

```Python
class Solution:
    def numDecodings(self, s: str) -> int:
        n = len(s)
        s = ' ' + s
        f = [0] * 3
        f[0] = 1
        for i in range(1,n + 1):
            f[i % 3] = 0
            a = ord(s[i]) - ord('0')
            b = ( ord(s[i - 1]) - ord('0') ) * 10 + ord(s[i]) - ord('0')
            if 1 <= a <= 9:
                f[i % 3] = f[(i - 1) % 3]
            if 10 <= b <= 26:
                f[i % 3] += f[(i - 2) % 3]
        return f[n % 3]
```

* 时间复杂度：共有 `n` 个状态需要被转移。复杂度为 $O(n)$。
* 空间复杂度：$O(1)$。

