### 解题思路

1、构造最小堆，统计元素出现次数。
2、遍历数组，维护左数组最大元素，和右数组最小值（最小堆堆顶元素）比较。

### 执行结果

![捕获.PNG](https://pic.leetcode.cn/1666578328-oxxwIB-%E6%8D%95%E8%8E%B7.PNG)

### 代码

* java

```java
class Solution {
    public int partitionDisjoint(int[] nums) {
        // 构造最小堆，统计元素出现的次数
        TreeMap<Integer, Integer> numCntTreeMap = new TreeMap<>();
        for (int num : nums) {
            numCntTreeMap.put(num, numCntTreeMap.getOrDefault(num, 0) + 1);
        }

        int minLeftArrLen = 1;
        // 初值
        int maxLeftArrNum = nums[0];
        // 从堆中更新元素个数或移除该元素
        Integer numCnt = numCntTreeMap.get(nums[0]);
        if (numCnt == 1) {
            numCntTreeMap.remove(nums[0]);
        } else {
            numCntTreeMap.put(nums[0], numCnt - 1);
        }
        for (int i = 1; i < nums.length; i++) {
            if (numCntTreeMap.isEmpty()) {
                break;
            }
            // 左数组最大元素，和右数组最小值（最小堆堆顶元素）比较
            if (maxLeftArrNum <= numCntTreeMap.firstEntry().getKey()) {
                break;
            } else {
                // 从堆中更新元素个数或移除该元素
                numCnt = numCntTreeMap.get(nums[i]);
                if (numCnt == 1) {
                    numCntTreeMap.remove(nums[i]);
                } else {
                    numCntTreeMap.put(nums[i], numCnt - 1);
                }
                if (nums[i] > maxLeftArrNum) {
                    // 更新左数组最大值
                    maxLeftArrNum = nums[i];
                }
                minLeftArrLen++;
            }
        }

        return minLeftArrLen;
    }
}
```

