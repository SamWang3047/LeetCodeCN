# 1. 迭代解法

请看以下视频讲解：

![206_1_迭代解法.mp4](https://leetcode.cn/problems/UHnkqh/solution/jian-dan-yi-dong-javac-pythonjs-dong-hua-gy6w/ec194742-c125-429f-9d36-173f5fc7b8fa)

代码如下：

* []

```java
public ListNode reverseList(ListNode head) {
    ListNode prev = null;
    ListNode curr = head;
    while (curr != null) {
        ListNode next = curr.next;
        curr.next = prev;
        prev = curr;
        curr = next;
    }
    return prev;
}
```

* []

```C++
public:
    ListNode* reverseList1(ListNode* head) {
        ListNode* prev = nullptr;
        ListNode* curr = head;
        while (curr) {
            ListNode* next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
```

* []

```Python
def reverseList(self, head: ListNode) -> ListNode:
    prev, curr = None, head
    while curr is not None:
        next = curr.next
        curr.next = prev
        prev = curr
        curr = next
    return prev
```

* []

```javascript
var reverseList = function(head) {
    let prev = null, curr = head
    while (curr) {
        const next = curr.next
        curr.next = prev
        prev = curr
        curr = next
    }
    return prev
};
```

* []

```Golang
// 迭代
func reverseList1(head *ListNode) *ListNode {
    var prev *ListNode = nil
    var curr = head
    for curr != nil {
        var next = curr.Next
        curr.Next = prev
        prev = curr
        curr = next
    }
    return prev
}
```

# 2. 递归解法

## 2.1 为什么可以使用递归

请看以下视频讲解：
![...06_2_为什么可以使用递归实现.mp4](https://leetcode.cn/problems/UHnkqh/solution/jian-dan-yi-dong-javac-pythonjs-dong-hua-gy6w/58a00b4f-068d-4efa-985c-dcec2cdd0b23)

## 2.2 递归解法思路

请看视频：
![206_3_递归实现.mp4](https://leetcode.cn/problems/UHnkqh/solution/jian-dan-yi-dong-javac-pythonjs-dong-hua-gy6w/83295b82-8ab6-4***5-bf37-7e562a899fb1)

代码如下：

* []

```java
public ListNode reverseList(ListNode head) {
    // 1. 递归终止条件
    if (head == null || head.next == null) {
        return head;
    }
    ListNode p = reverseList(head.next);
    head.next.next = head;
    head.next = null;
    return p;
}
```

* []

```C++
public:
    ListNode* reverseList(ListNode* head) {
        // 1. 递归终止条件
        if (head == nullptr || head->next == nullptr) return head;
        ListNode* p = reverseList(head->next);
        head->next->next = head;
        head->next = nullptr;
        return p;
    }
```

* []

```Python
def reverseList(self, head: ListNode) -> ListNode:
    # 1. 递归终止条件
    if head is None or head.next is None:
        return head
    
    p = self.reverseList(head.next)
    head.next.next = head
    head.next = None

    return p
```

* []

```javascript
var reverseList = function(head) {
    // 1. 递归终止条件
    if (head == null || head.next == null) return head
    const p = reverseList(head.next)
    head.next.next = head
    head.next = null
    return p
};
```

* []

```Golang
// 递归
func reverseList(head *ListNode) *ListNode {
    // 1. 递归终止条件
    if head == nil || head.Next == nil {
        return head
    }
    var p = reverseList(head.Next)
    head.Next.Next = head
    head.Next = nil
    return p
}
```

在刷题的时候：

1. 如果你觉得自己数据结构与算法**基础不够扎实**，请[点击这里](http://douma-tech.com/algo/ab/offer024)， 这里包含了**一个程序员 5 年内需要的所有算法知识**。

2. 如果你感觉刷题**太慢**，或者感觉**很困难**，或者**赶时间**，请[点击这里](http://douma-tech.com/algo/b/offer024)， 这里**用 365 道高频算法题，带你融会贯通算法知识，做到以不变应万变**。

3. 系统学习**操作系统内核**、**计算机网络**和**数据库 (MySQL、Redis)**，请[点击这里](http://douma-tech.com/basic/c)，这里**包含了一个程序员所有必备的基础内功**

