## 模拟

本题考察的是简单模拟能力，或者说是简单的对「循环不变量」的设计。

我们从前往后处理所有的 $arr[i]$（即 `i` 定义为当前划分块的右边界下标），处理过程中定义变量 `j` 为当前划分块的左边界下标（初始值为 $0$），定义 `min` 为当前划分块中元素最小值（初始值为 $arr[0]$ 或 $n$），定义 `max` 为当前划分块中元素最大值（初始值为 $arr[0]$ 或 $-1$）。

当且仅当 $j = min$ 且 $i = max$ 时，下标范围 $[j, i]$ 排序结果为 $[min, max]$，此时块的个数加一，并重新初始化几个变量，继续循环统计下个块的信息。

代码：

* []

```Java
class Solution {
    public int maxChunksToSorted(int[] arr) {
        int n = arr.length, ans = 0;
        for (int i = 0, j = 0, min = n, max = -1; i < n; i++) {
            min = Math.min(min, arr[i]);
            max = Math.max(max, arr[i]);
            if (j == min && i == max) {
                ans++; j = i + 1; min = n; max = -1;
            }
        }
        return ans;
    }
}
```

* []

```TypeScript
function maxChunksToSorted(arr: number[]): number {
    let n = arr.length, ans = 0
    for (let i = 0, j = 0, min = n, max = -1; i < n; i++) {
        min = Math.min(min, arr[i])
        max = Math.max(max, arr[i])
        if (j == min && i == max) {
            ans++; j = i + 1; min = n; max = -1;
        }
    }
    return ans
}
```

* []

```Python
class Solution:
    def maxChunksToSorted(self, arr: List[int]) -> int:
        n, ans = len(arr), 0
        j, minv, maxv = 0, n, -1
        for i in range(n):
            minv, maxv = min(minv, arr[i]), max(maxv, arr[i])
            if j == minv and i == maxv:
                ans, j, minv, maxv = ans + 1, i + 1, n, -1
        return ans
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
