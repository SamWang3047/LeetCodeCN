* 

```
class Solution {
    public int[] sortEvenOdd(int[] nums) {
        int n = nums.length;
        //小根堆，非递减
        PriorityQueue<Integer> ou = new PriorityQueue<>(); 
        //大根堆，非递增
        PriorityQueue<Integer> ji = new PriorityQueue<>((a, b)->{
            return b - a;
        });

        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) ou.offer(nums[i]);
            else ji.offer(nums[i]);
        }

        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) nums[i] = ou.poll();
            else nums[i] = ji.poll();
        }

        return nums;
    }
}
```

![1.png](https://pic.leetcode-cn.com/1644155356-QxwJgc-1.png)

